{"version":3,"sources":["components/app-form/index.js","components/app-form/app-form.js","components/app-face/wtl.png","components/app-face/index.js","components/app-face/app-face.js","components/app-done/done.png","components/app-done/index.js","components/app-done/app-done.js","services/pushService.js","components/app/index.js","components/app/app.js","index.js"],"names":["AppForm","props","onNameChange","event","setState","name","target","value","onTextChange","text","onSubmit","preventDefault","isItSwitched","isFormValid","onSend","state","goToDone","length","isValid","Container","className","Col","Form","this","FormGroup","Label","for","Input","type","id","onChange","valid","invalid","FormFeedback","Button","color","React","Component","AppFace","goInForm","onClick","src","wtl","alt","AppDone","goFromDone","allDone","PushService","createPost","post","a","request","Request","url","method","body","JSON","stringify","useRequest","console","error","fetch","responce","json","App","pushService","startFormWindow","data","date","Date","toLocaleDateString","time","toLocaleTimeString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9693a3cb.chunk.js","sourcesContent":["import AppForm from \"./app-form\";\r\nexport default AppForm;\r\n","import React from \"react\";\r\nimport './app-form.css';\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input,\r\n    Container,\r\n    Col,\r\n    FormFeedback\r\n} from 'reactstrap';\r\n\r\nexport default class AppForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            text: \"\",\r\n            isItSwitched: false,\r\n            isValid: true\r\n        };\r\n    }\r\n\r\n    //забираем данные по имени при каждом изменении поля\r\n    onNameChange = (event) => {\r\n        this.setState({name: event.target.value});\r\n    }\r\n\r\n    //забираем данные по тексту при каждом изменении поля\r\n    onTextChange = (event) => {\r\n        this.setState({text: event.target.value});\r\n    }\r\n\r\n    // при нажатии кнопки отправить\r\n    onSubmit = (event) => {\r\n        event.preventDefault()\r\n        //отмечаем что кнопка была нажата\r\n        this.setState({isItSwitched: true});\r\n        //если форма валидна \r\n        //отправляем данные формы через пропсы в app.js для отправки на сервер\r\n        //переключаем на следующий экран\r\n        if (this.isFormValid()) {\r\n            this\r\n                .props\r\n                .onSend(this.state)\r\n            this\r\n                .props\r\n                .goToDone(this.state)\r\n        }\r\n    }\r\n\r\n    //проверяем валидна ли форма\r\n    isFormValid = () => {\r\n        //если сообщение больше 20 сиволов то все ок\r\n        if (this.state.text.length >= 20) {\r\n            this.setState({isValid: true});\r\n            return true\r\n        }\r\n        this.setState({isValid: false});\r\n        return false\r\n    }\r\n\r\n    render() {       \r\n        return (\r\n            <Container className=\"docs-example\">\r\n                <Col>\r\n                    <Form onSubmit={this.onSubmit}>\r\n                        <FormGroup className=\"form-floating mb-3\">\r\n                            <Label for=\"whatLearn\">Чему вы хотите научиться?</Label>\r\n                            <Input\r\n                                type=\"textarea\"\r\n                                name=\"text\"\r\n                                id=\"whatLearn\"\r\n                                //placeholder=\"Какие темы вам интересны?\"\r\n                                onChange={this.onTextChange}\r\n                                valid = {false}\r\n                                invalid={!this.state.isValid}/>\r\n                            <FormFeedback valid>Вы заполнили все правильно</FormFeedback>\r\n                            <FormFeedback >Сообщение должно быть больше 20 символов</FormFeedback>\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"learnerName\">Как вас зовут</Label>\r\n                            <Input\r\n                                name=\"text\"\r\n                                id=\"learnerName\"\r\n                                //placeholder=\"Имя Фамилия\"\r\n                                onChange={this.onNameChange}/>\r\n                        </FormGroup>\r\n                        <Button type=\"submit\" color=\"primary\" className=\"btn\">Отправить</Button>                        \r\n                    </Form>\r\n                </Col>\r\n            </Container>\r\n        )\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/wtl.28203772.png\";","import AppFace from \"./app-face\";\r\nexport default AppFace;\r\n","import React from \"react\";\r\nimport './app-face.css';\r\nimport wtl from './wtl.png'\r\nimport {Container} from 'reactstrap';\r\n\r\nexport default class AppFace extends React.Component {\r\n\r\n    render() {\r\n        const {goInForm} = this.props\r\n        return (\r\n            <Container>\r\n                <img onClick={goInForm} className=\"responsive\" src={wtl} alt=\"\"></img>\r\n            </Container>\r\n        )\r\n    }\r\n}","export default __webpack_public_path__ + \"static/media/done.9e99482c.png\";","import AppDone from \"./app-done\";\r\nexport default AppDone;\r\n","import React from \"react\";\r\nimport './app-done.css';\r\nimport allDone from './done.png'\r\nimport {Container} from 'reactstrap';\r\n\r\nexport default class AppDone extends React.Component {\r\n\r\n    render() {\r\n        const {goFromDone} = this.props   \r\n        return (\r\n            <Container onClick={goFromDone}>\r\n                <img  src={allDone} className=\"responsive\" alt=\"\"></img>\r\n            </Container>\r\n        )\r\n    }\r\n}","export default class PushService {\r\n    constructor() {\r\n        this.url = 'https://ilya-best-story.firebaseio.com/'\r\n    }\r\n\r\n    createPost = async(post) => {\r\n        try {\r\n            //const request = new Request(this.url + '/text/' + 999 + '.json', {    \r\n                const request = new Request(this.url + '/posts.json', {            \r\n                method: 'post',\r\n                //преобразовываем объект post в JSON\r\n                body: JSON.stringify(post)\r\n            })\r\n            return await this.useRequest(request)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n\r\n    }\r\n\r\n    useRequest = async(request) => {\r\n        //создаем объект для ответа, получения данных\r\n        const responce = await fetch(request)\r\n        //возвращаем ответ после того как распарсим\r\n        return await responce.json()\r\n    }\r\n\r\n}","import App from \"./app\";\r\nexport default App;\r\n","import React from \"react\";\r\nimport './app.css';\r\nimport AppForm from '../app-form/'\r\nimport AppFace from '../app-face'\r\nimport AppDone from '../app-done'\r\nimport PushService from \"../../services/pushService\";\r\n\r\nexport default class App extends React.Component {\r\n    pushService = new PushService();\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        //свойство для определения того что отображать. обложку или форму\r\n        this.state = {\r\n            startFormWindow: 'start'\r\n        }\r\n    }\r\n\r\n    // после нажатия на картинку в файле app-face меняем startFormWindow чтобы\r\n    // показать форму\r\n    goInForm = () => {\r\n        this.setState({startFormWindow: 'form'})\r\n\r\n    }\r\n\r\n    goFromDone = () => {\r\n        this.setState({startFormWindow: 'start'})\r\n\r\n    }\r\n\r\n    goToDone = () => {\r\n        this.setState({startFormWindow: 'done'})\r\n\r\n    }\r\n\r\n    onSend = (data) => {\r\n        this\r\n            .pushService\r\n            .createPost(this.createPost(data))\r\n    }\r\n\r\n    createPost = (data) => {\r\n        const formData = {\r\n            text: data.text,\r\n            name: data.name,\r\n            date: new Date().toLocaleDateString(),\r\n            time: new Date().toLocaleTimeString()\r\n        };\r\n\r\n        return formData\r\n    }\r\n\r\n    render() {\r\n        //если на картинку не нажали показываем ее иначе форму\r\n        if (this.state.startFormWindow === 'start') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <AppFace goInForm={this.goInForm}/>\r\n                </div>\r\n            )\r\n        } else if (this.state.startFormWindow === 'form') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <AppForm onSend={this.onSend} goToDone={this.goToDone}/>\r\n                </div>\r\n            )\r\n        } else if (this.state.startFormWindow === 'done') {\r\n            return (\r\n                <div className=\"container\">\r\n                    <AppDone goFromDone={this.goFromDone}/>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/app/\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}